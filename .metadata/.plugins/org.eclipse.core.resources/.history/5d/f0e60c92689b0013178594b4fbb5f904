package com.jtsay.flappybird;

import java.util.ArrayList;
import java.util.List;

import com.badlogic.gdx.math.Vector2;

public class World {
	public interface WorldListener {
		public void jump();

		public void crash();

		public void score();
	}
	
	public static final Vector2 GRAVITY = new Vector2(0, -10);
	public static final int WIDTH = 320;
	public static final int HEIGHT = 480;
	public static final int PIPE_SPACING = 128;
	public static final int PIPE_VELOCITY = 250;
	public final Bird bird;
	public final List<PipeSet> pipeSets;
	public WorldState state;
	
	public World(WorldListener listener) {
		bird = new Bird(WIDTH/4, HEIGHT/4);
		pipeSets = new ArrayList<PipeSet>(3);
		pipeSets.add(new PipeSet(WIDTH*3/4, HEIGHT/2));
		pipeSets.add(new PipeSet(WIDTH*3/4 + PIPE_SPACING, HEIGHT/2 + PIPE_SPACING));
		pipeSets.add(new PipeSet(WIDTH*3/4 + 2*PIPE_SPACING, HEIGHT/2 + 2*PIPE_SPACING));
		state = WorldState.RUNNING;
	}
	
	public void reset() {
		state = WorldState.RUNNING;
		bird.reset(WIDTH/4, HEIGHT/4);
		for (PipeSet pipeSet : pipeSets) {
			
		}
	}
	
	public void update(float deltaTime, boolean isTouched) {
		updateBird(deltaTime, isTouched);
		updatePipes(deltaTime);
		checkCollision();
	}
	
	private void updateBird(float deltaTime, boolean isTouched) {
		bird.velocity.add(GRAVITY.scl(deltaTime));
		bird.move(bird.velocity.x, bird.velocity.y);
	}
	
	private void updatePipes(float deltaTime) {
		for (PipeSet pipeSet : pipeSets) {
			pipeSet.moveLeft(deltaTime * PIPE_VELOCITY);
		}
	}
	
	private void checkCollision() {
		for (PipeSet pipeSet : pipeSets) {
			if (bird.bounds.overlaps(pipeSet.topPipe.bounds) ||
					bird.bounds.overlaps(pipeSet.bottomPipe.bounds)) {
				bird.isHit();
				state = WorldState.PAUSED;
			}
		}
	}
	
}
